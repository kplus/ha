#################################################################
#
#
# Helper functions:
#   For those functions who don't directly control lights logic
#
# 1. Initial off lights when restart HA
# 2. Bath always on when door is close and motion detected
# 3. Reset bath pir when light is off or door is open
# 4. Safe guard to check lights every 1 hour and turn off
# necessary ones
# 5. Special handling for loft light as it's controlled by
# the contact sensor on the cover
#
#
#################################################################
#Helper function 1
- alias: reset lights
  initial_state: 'on'
  trigger:
    - platform: homeassistant
      event: start
    - platform: homeassistant
      event: shutdown
  action:
    service: light.turn_off
    entity_id: all

# Bath light always on, mainly used in shower
# As light will be turned on by generic turn of
# function, we only have to unset pir to keep it
# always on
- alias: bath always on
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: binary_sensor.bath
    to: 'on'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: binary_sensor.door_window_sensor_158d00022bf88d
        state: 'off'
      - condition: state
        entity_id: input_boolean.pir_bath
        state: 'on'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.pir_bath
    - service: automation.turn_on
      entity_id: automation.bath_pir_reset

- alias: bath pir reset
  initial_state: 'off'
  trigger:
    - platform: state
      entity_id: light.bath
      to: 'off'
    - platform: state
      entity_id: binary_sensor.door_window_sensor_158d00022bf88d
      to: 'on'
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.pir_bath
    - service: automation.turn_off
      entity_id: automation.bath_pir_reset

# safeguard for 1201s
- alias: safeguard loop
  initial_state: 'on'
  trigger:
    - platform: time_pattern
      minutes: '/29'
      seconds: 0
  action:
    - service: light.turn_off
      data_template:
        entity_id: >
          {% if is_state("light.toilet", "on") and ((as_timestamp(now())-as_timestamp(states.binary_sensor.toilet.last_changed)) > 1200) %}
            light.toilet
          {% elif is_state("light.bath", "on") and ((as_timestamp(now())-as_timestamp(states.binary_sensor.bath.last_changed)) > 1200) %}
            light.bath
          {% elif is_state("light.dining", "on") and ((as_timestamp(now())-as_timestamp(states.binary_sensor.dining.last_changed)) > 1200) %}
            light.dining
          {% elif is_state("light.kitchen", "on") and ((as_timestamp(now())-as_timestamp(states.binary_sensor.kitchen.last_changed)) > 1200) %}
            light.kitchen
          {% elif is_state("light.living_room", "on") and ((as_timestamp(now())-as_timestamp(states.binary_sensor.living_room.last_changed)) > 1200) %}
            light.living_room
          {% elif is_state("light.hall", "on") and ((as_timestamp(now())-as_timestamp(states.binary_sensor.hall.last_changed)) > 1200) %}
            light.hall
          {% elif is_state("light.loft", "on") and ((as_timestamp(now())-as_timestamp(states.binary_sensor.loft.last_changed)) > 1200) %}
            light.loft
          {% endif %}

# Control loft light, it's using contact sensor
- alias: Control loft light
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id: binary_sensor.loft
  action:
    - service_template: >
        {% if is_state("binary_sensor.loft", "on") and is_state("light.loft", "off") %}
          light.turn_on
        {% elif is_state("binary_sensor.loft", "off") and is_state("light.loft", "on") %}
          light.turn_off
        {% endif %}
      entity_id: light.loft


###########################################################################
#
#
# Light control functions
#
# There are 6 functions to control the lights logic
# 1. Set a night_mode flag. And check input_booleans every half hour
# and set it to be same as night_mode if idle for 20 mintues.
# 2. PIR on triggers. If input_boolean is on and light is off, turn light
# on. If light is on already, update timer.
# 3. Set short timer whenever light turns on
# 4. Short timeout handling. If PIR has been off for long, turn off light;
# otherwise start long timeout.
# 5. Delay automation when light is off(combine with function 4, this case
# is limited to manually off only), also cancel both timers
# 6. Turn off light when long timeout and input_boolean is set
#
###########################################################################
# Function 1
- alias: check and set day/night mode every hour
  initial_state: 'on'
  trigger:
    platform: time_pattern
    hours: '/1'
    minutes: 0
    seconds: 0
  action:
  # unset night_mode every hour during day time
  - service: input_boolean.turn_off
    data:
      entity_id: input_boolean.night_mode
  # In night, set night_mode every hour
  - condition: template
    value_template: '{{ state_attr("sun.sun", "elevation") < 0 }}'
  - service: input_boolean.turn_on
    data:
      entity_id:
        - input_boolean.night_mode
        - group.pir

- alias: check PIR
  initial_state: 'on'
  trigger:
    - platform: time_pattern
      minutes: '/29'
  action:
    - service_template: >
          {% if is_state("input_boolean.night_mode", "on") %}
            input_boolean.turn_on
          {% else %}
            input_boolean.turn_off
          {% endif %}
      data_template:
        entity_id: >
          {% if (states("input_boolean.pir_bath") != states("input_boolean.night_mode")) and is_state("binary_sensor.bath", "off") and ((as_timestamp(now())-as_timestamp(states.binary_sensor.bath.last_changed)) > 1200) %}
            input_boolean.pir_bath
          {% elif (states("input_boolean.pir_toilet") != states("input_boolean.night_mode")) and is_state("binary_sensor.toilet", "off") and ((as_timestamp(now())-as_timestamp(states.binary_sensor.toilet.last_changed)) > 1200) %}
            input_boolean.pir_toilet
          {% elif (states("input_boolean.pir_kitchen") != states("input_boolean.night_mode")) and is_state("binary_sensor.kitchen", "off") and ((as_timestamp(now())-as_timestamp(states.binary_sensor.kitchen.last_changed)) > 1200) %}
            input_boolean.pir_kitchen
          {% elif (states("input_boolean.pir_dining") != states("input_boolean.night_mode")) and is_state("binary_sensor.dining", "off") and ((as_timestamp(now())-as_timestamp(states.binary_sensor.dining.last_changed)) > 1200) %}
            input_boolean.pir_dining
          {% elif (states("input_boolean.pir_landing") != states("input_boolean.night_mode")) and is_state("binary_sensor.landing", "off") and ((as_timestamp(now())-as_timestamp(states.binary_sensor.landing.last_changed)) > 1200) %}
            input_boolean.pir_landing
          {% elif (states("input_boolean.pir_hall") != states("input_boolean.night_mode")) and is_state("binary_sensor.hall", "off") and ((as_timestamp(now())-as_timestamp(states.binary_sensor.hall.last_changed)) > 1200) %}
            input_boolean.pir_hall
          {% elif (states("input_boolean.pir_living_room") != states("input_boolean.night_mode")) and is_state("binary_sensor.living_room", "off") and ((as_timestamp(now())-as_timestamp(states.binary_sensor.living_room.last_changed)) > 1200) %}
            input_boolean.pir_living_room
          {% endif %}

# function 2
- alias: Turn on lights
  initial_state: 'on'
  trigger:
    platform: state
    entity_id:
      - binary_sensor.kitchen
      - binary_sensor.kitchen_sonoff
      - binary_sensor.dining
      - binary_sensor.bath
      - binary_sensor.toilet
      - binary_sensor.living_room
#      - binary_sensor.hall
    to: 'on'
  condition:
    condition: and
    conditions:
      # when RID control is enabled
      - condition: template
        value_template: '{{ is_state("input_boolean.pir_" + trigger.entity_id.split(".")[1].split("_")[0], "on") }}'
      # when light is off
      - condition: template
        value_template: '{{ is_state("light." + trigger.entity_id.split(".")[1].split("_")[0], "off") }}'
  action:
    - service: light.turn_on
      data_template:
        entity_id: '{{"light." + trigger.entity_id.split(".")[1].split("_")[0]}}'

- alias: Restart timers
  initial_state: 'on'
  trigger:
    platform: state
    entity_id:
      - binary_sensor.kitchen
      - binary_sensor.kitchen_sonoff
      - binary_sensor.dining
      - binary_sensor.bath
      - binary_sensor.toilet
      - binary_sensor.living_room
#      - binary_sensor.hall
    to: 'on'
  condition:
# when light is already on
    condition: template
    value_template: '{{ is_state("light." + trigger.entity_id.split(".")[1].split("_")[0], "on") }}'
  action:
    - service: timer.start
      data_template: 
        entity_id: >
          {% if states("timer.long_" + trigger.entity_id.split(".")[1].split("_")[0]) != "idle" %}
            {{ "timer.long_" + trigger.entity_id.split(".")[1].split("_")[0] }}
          {% endif %}

# function 3
- alias: Start short timers
  initial_state: 'on'
  trigger:
    platform: state
    entity_id:
      - light.kitchen
      - light.dining
      - light.bath
      - light.toilet
      - light.living_room
#      - light.hall
    to: 'on'
  action:
    - service: timer.start
      data_template:
        entity_id: '{{ "timer.short_" + trigger.entity_id.split(".")[1] }}'

# function 4
# cannot use event trigger as not able to fetch trigger information
- alias: Short timeout lights off
  initial_state: 'on'
  trigger:
    - platform: template
      value_template: '{{ is_state("timer.short_bath", "idle") }}'
    - platform: template
      value_template: '{{ is_state("timer.short_dining", "idle") }}'
    - platform: template
      value_template: '{{ is_state("timer.short_kitchen", "idle") }}'
    - platform: template
      value_template: '{{ is_state("timer.short_toilet", "idle") }}'
    - platform: template
      value_template: '{{ is_state("timer.short_dining", "idle") }}'
  condition:
    condition: template
    value_template: >
      {% set name = trigger.entity_id.split(".")[1].split("_")[1] %}
      {{ is_state("light." + name, "on") and is_state("binary_sensor." + name, "off") and (as_timestamp(now())-as_timestamp(states.binary_sensor[name].last_changed) > 7) }}
  action:
    - service: light.turn_off
      data_template:
        entity_id: '{{ "light." + trigger.entity_id.split(".")[1].split("_")[1] }}'
    - service: input_boolean.turn_on
      data_template:
        entity_id: '{{ "input_boolean.pir_" + trigger.entity_id.split(".")[1].split("_")[1] }}'

- alias: Short timeout to long timeout
  initial_state: 'on'
  trigger:
    - platform: template
      value_template: '{{ is_state("timer.short_bath", "idle") }}'
    - platform: template
      value_template: '{{ is_state("timer.short_dining", "idle") }}'
    - platform: template
      value_template: '{{ is_state("timer.short_kitchen", "idle") }}'
    - platform: template
      value_template: '{{ is_state("timer.short_toilet", "idle") }}'
    - platform: template
      value_template: '{{ is_state("timer.short_dining", "idle") }}'
  condition:
    condition: template
    value_template: >
      {% set name = trigger.entity_id.split(".")[1].split("_")[1] %}
      {{ is_state("light." + name, "on") and (is_state("binary_sensor." + name, "on") or (as_timestamp(now())-as_timestamp(states.binary_sensor[name].last_changed) < 7)) }}
  action:
    - service: timer.start
      data_template:
        entity_id: '{{ "timer.long_" + trigger.entity_id.split(".")[1].split("_")[1] }}'

# function 5
- alias: Light off delays
  initial_state: 'on'
  mode: parallel
  trigger:
    platform: state
    entity_id:
      - light.kitchen
      - light.dining
      - light.bath
      - light.toilet
      - light.living_room
#      - light.hall
    to: 'off'
  action:
    - service: timer.cancel
      data_template:
        entity_id: '{{ "timer.short_" + trigger.entity_id.split(".")[1].split("_")[0] }}'
    - service: timer.cancel
      data_template:
        entity_id: '{{ "timer.long_" + trigger.entity_id.split(".")[1].split("_")[0] }}'
    - service: input_boolean.turn_off
      data_template:
        entity_id: '{{ "input_boolean.pir_" + trigger.entity_id.split(".")[1].split("_")[0] }}'
    - delay: 00:00:05
    - service_template: >
        {% if is_state("input_boolean.night_mode", "on") %}
          input_boolean.turn_on
        {% else %}
          input_boolean.turn_off
        {% endif %}
      data_template:
        entity_id: '{{ "input_boolean.pir_" + trigger.entity_id.split(".")[1].split("_")[0] }}'

# function 6
- alias: Long timeout lights off
  initial_state: 'on'
  trigger:
    - platform: template
      value_template: '{{ is_state("timer.long_bath", "idle") }}'
    - platform: template
      value_template: '{{ is_state("timer.long_dining", "idle") }}'
    - platform: template
      value_template: '{{ is_state("timer.long_kitchen", "idle") }}'
    - platform: template
      value_template: '{{ is_state("timer.long_toilet", "idle") }}'
    - platform: template
      value_template: '{{ is_state("timer.long_dining", "idle") }}'
  condition:
    condition: template
    value_template: >
      {% set name = trigger.entity_id.split(".")[1].split("_")[1] %}
      {{ is_state("light." + name, "on") and is_state("input_boolean.pir_" + name, "on") }}
  action:
    - service: light.turn_off
      data_template:
        entity_id: '{{ "light." + trigger.entity_id.split(".")[1].split("_")[1] }}'
