################################################################################
#			Lights state flowchart
#
# Symbols:			Events:				1	2
#	L:  light			A: 开关			开	关
#	PL: pre light			B: 延时			长	短
#	RP: pir				C: neighbor sensor	on	off
#	S:  sensor			D: sensor		on	off
#	NP: neighbor pre light
#
#			      |—————————|
#			      | L:  OFF |
#			      | PL: OFF |
#			      | PR: OFF |
#			      | S:  OFF |
#			      | NP: OFF |
#			      |_________|
#				|   /|\	
#			 PR->ON	|    | PR->OFF
#			       \|/   |
#			      |—————————|		|—————————|
#			      |   *S*	|—————— A1 ————>|   *N*	  |
#			      | L:  OFF |<————— A2 —————| L:  ON  |
#			      | PL: OFF |<————— B2 —————| PL: OFF |
#	|————————————————————>| PR: ON	|	  —————>| S:  OFF |
#	|		      | S:  OFF |	 /  ____| NP: NA  |
#	D2		      | NP: OFF |<—\	/  /	|_________|
#	|		      |_________|   \ D2 D1		|	
#	|			|	     \/  /		|
#	|			D1	     /  /		C1
#	|		       \|/	    /  /	       \|/
#   |—————————|		      |—————————|  /  /	\	|—————————|
#   |	*R*   |		      |   *M*	|_/  /	 A2	|   *P*	  |
#   | L:  OFF |		      | L:  ON	|   /	  or	| L:  ON  |
#   | PL: OFF |<————— A2 —————| PL: OFF |<—/ 	   B2	| PL: ON  |
#   | S:  ON  |—————— A1 ————>| S:  ON	|	     \__| S:  OFF |
#   | NP: NA  |		      | NP: ON	|		| NP: NA  |
#   |_________|		      |_________|<————— D1 —————|_________|
#      /|\			|			       /|\
#	|			C1				|
#	|		       \|/				|
#	|		      |—————————|			|
#	|____________ A2 _____|   *Q*	|______ D2 _____________|
#			      | L:  ON	|
#			      | PL: ON	|
#			      | S:  ON	|
#			      | NP: NA	|
#			      |_________|
#
# Functions:
#	B(B1/2) ->	unset L
#	C1	->	set PL only when L is on
#	D1	->	set L, unset PL
#	L1/2	->	unset PL
#
#
################################################################################



#################################################################
#
#
# Helper functions:
#   For those functions who don't directly control lights logic
#
# 1. Initial off lights when restart HA
# 2. Reset motion sensor boolean
# 3. Lights toggling unsets pre_lights (L1/2 in flowchart)
# 4. Set pir in afternoon depends on weather and sun
# 5. Unset pir in morning depens on sun
# 6. Bath always on when door is close and motion detected
# 7. Reset bath pir when light is off or door is open
#
#
#################################################################
- alias: reset lights
  hide_entity: true
  initial_state: 'on'
  trigger:
    - platform: homeassistant
      event: start
    - platform: homeassistant
      event: shutdown
  action:
    service: light.turn_off
    entity_id: group.all_lights

- alias: reset pir every hour
  hide_entity: true
  initial_state: 'on'
  trigger:
    platform: time_pattern
    hours: '/1'
    minutes: 0
    seconds: 0
  action:
  # turn off pir every hour during day time
  - service: input_boolean.turn_off
    data:
      entity_id: group.pir
  # In night, turn on all PIRs, we use Twilight as condition,
  # special set is done in "set pir when ..." functions
  - condition: template
    value_template: '{{ state_attr("sun.sun", "elevation") < -5 }}'
  - service: input_boolean.turn_on
    data:
      entity_id: group.pir

# unset pre lights when lights turn off
- alias: unset pre lights
  hide_entity: true
  initial_state: 'on'
  trigger:
    platform: state
    entity_id:
      - light.kitchen
      - light.dining
      - light.bath
      - light.playroom
      - light.toilet
      - light.living_room
      - light.hall
  action:
    # bindly unset input_boolean, not sure if this will generate error messages if already off
    service: input_boolean.turn_off
    data_template:
      entity_id: '{{"input_boolean.pre_" + trigger.entity_id.split(".")[1]}}'

- alias: set pir
  hide_entity: true
  initial_state: 'on'
  trigger:
      # when sun is below horizon, set darker rooms pir in not sunny days
    - platform: numeric_state
      entity_id: sun.sun
      value_template: "{{ state_attr('sun.sun', 'elevation') }}"
      below: 3
      # when sun is in Nautical twilight, set pir depends on weather
    - platform: numeric_state
      entity_id: sun.sun
      value_template: "{{ state_attr('sun.sun', 'elevation') }}"
      below: 0
      # when in night, set all pirs, this consistant with reset pir
    - platform: numeric_state
      entity_id: sun.sun
      value_template: "{{ state_attr('sun.sun', 'elevation') }}"
      below: -5
  action:
    service: input_boolean.turn_on
    data_template:
      # weather symbol == 1 means sunny
      # https://api.met.no/weatherapi/weathericon/1.1/documentation
      entity_id: >
        {% if ((state_attr('sun.sun', 'elevation') > 0) and (state_attr('sensor.weather_symbol', 'symbol') != 1)) or ((state_attr('sun.sun', 'elevation') > -5) and (state_attr('sun.sun', 'elevation') < 0) and (state_attr('sensor.weather_symbol', 'symbol') == 1)) %}
          input_boolean.pir_playroom
        {% else %}
          group.pir
        {% endif %}

- alias: unset pir
  hide_entity: true
  initial_state: 'on'
  trigger:
      # when sun is above horizon, unset pir
    - platform: numeric_state
      entity_id: sun.sun
      value_template: "{{ state_attr('sun.sun', 'elevation') }}"
      above: 0
      # when sun is above -6, unset pir
    - platform: numeric_state
      entity_id: sun.sun
      value_template: "{{ state_attr('sun.sun', 'elevation') }}"
      above: -6
  action:
    service: input_boolean.turn_off
    entity_id: group.pir

# Bath light always on, mainly used in shower
# As light will be turned on by generic turn of
# function, we only have to unset pir to keep it
# always on
- alias: bath always on
  hide_entity: true
  initial_state: 'on'
  trigger:
    platform: state
    entity_id: binary_sensor.bath
    to: 'on'
  condition:
    condition: and
    conditions:
      - condition: state
        entity_id: binary_sensor.door_window_sensor_158d00022bf88d
        state: 'off'
      - condition: state
        entity_id: input_boolean.pir_bath
        state: 'on'
  action:
    - service: input_boolean.turn_off
      entity_id: input_boolean.pir_bath
    - service: automation.turn_on
      entity_id: automation.bath_pir_reset

- alias: bath pir reset
  hide_entity: true
  initial_state: 'off'
  trigger:
    - platform: state
      entity_id: light.bath
      to: 'off'
    - platform: state
      entity_id: binary_sensor.door_window_sensor_158d00022bf88d
      to: 'on'
  action:
    - service: input_boolean.turn_on
      entity_id: input_boolean.pir_bath
    - service: automation.turn_off
      entity_id: automation.bath_pir_reset


###########################################################################
#
#
# Neighbor sensor handling (C1 in flowchart)
# The idea is:
#    If people is moving away from an area where the light was on, they must
#    be soon enterring a neighbor area, so motion sensor in a neighbor area
#    can be used as a condition to accruatly control lights
#
# This is a helper function in theroy, but as it's a big part of light control
# logic, we have it separate.
#
###########################################################################
- alias: Pre lights Handling
  hide_entity: true
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.hall
        - binary_sensor.hall2
        - binary_sensor.living_room
        - binary_sensor.playroom
        - binary_sensor.kitchen_sonoff
        - binary_sensor.toilet
        - binary_sensor.landing
      to: 'on'
#  condition:
#    # when RID control is enabled
#    condition: template
#    value_template: '{{ is_state("input_boolean.pir_" + trigger.entity_id.split(".")[1], "on") }}'
  action:
    - service: input_boolean.turn_on
      data_template:
        entity_id: >
          {% if trigger.entity_id == "binary_sensor.kitchen_sonoff" %}
            input_boolean.pre_playroom
          {% elif trigger.entity_id == "binary_sensor.hall2" %}
            input_boolean.pre_playroom
          {% elif trigger.entity_id == "binary_sensor.hall" %}
            input_boolean.pre_living_room
          {% elif trigger.entity_id == "binary_sensor.toilet" %}
            input_boolean.pre_kitchen
          {% elif trigger.entity_id == "binary_sensor.landing" %}
            input_boolean.pre_bath
          {% elif trigger.entity_id == "binary_sensor.living_room" %}
            input_boolean.pre_hall
          {% elif trigger.entity_id == "binary_sensor.playroom" %}
            input_boolean.pre_kitchen
          {% endif %}
    - service: input_boolean.turn_on
      data_template:
        entity_id: >
          {% if trigger.entity_id == "binary_sensor.kitchen_sonoff" %}
            input_boolean.pre_toilet
          {% elif trigger.entity_id == "binary_sensor.hall2" %}
            input_boolean.pre_living_room
          {% elif trigger.entity_id == "binary_sensor.hall" %}
            input_boolean.pre_playroom
          {% elif trigger.entity_id == "binary_sensor.toilet" %}
            input_boolean.pre_dining
          {% elif trigger.entity_id == "binary_sensor.landing" %}
            input_boolean.pre_hall
          {% endif %}
    - service: input_boolean.turn_on
      data_template:
        entity_id: >
          {% if trigger.entity_id == "binary_sensor.kitchen_sonoff" %}
            input_boolean.pre_dining
          {% elif trigger.entity_id == "binary_sensor.hall2" %}
            input_boolean.pre_hall
          {% endif %}


#######################################################################
#
#
# Turning on lights (D1 in flowchart)
#
#
#######################################################################
- alias: Turn on lights
  hide_entity: true
  initial_state: 'on'
  trigger:
    platform: state
    entity_id:
      - binary_sensor.kitchen
      - binary_sensor.kitchen_sonoff
      - binary_sensor.dining
      - binary_sensor.bath
      - binary_sensor.playroom
      - binary_sensor.toilet
      - binary_sensor.living_room
#      - binary_sensor.hall
    to: 'on'
  condition:
    # when RID control is enabled
    condition: template
    value_template: '{{ is_state("input_boolean.pir_" + trigger.entity_id.split(".")[1].split("_")[0], "on") }}'
  action:
      # bindly unset input_boolean, not sure if this will generate error messages if already off
    - service: input_boolean.turn_off
      data_template:
        entity_id: '{{"input_boolean.pre_" + trigger.entity_id.split(".")[1].split("_")[0]}}'
      # when LED is off, not sure if this can be removed
    - condition: template
      value_template: '{{ is_state("light." + trigger.entity_id.split(".")[1].split("_")[0], "off") }}'
    - service: light.turn_on
      data_template:
        entity_id: '{{"light." + trigger.entity_id.split(".")[1].split("_")[0]}}'

# Turn on loft light, it's using contact sensor
- alias: Turn on loft light
  hide_entity: true
  initial_state: 'on'
  trigger:
    - platform: state
      entity_id:
        - binary_sensor.loft
      to: 'on'
  condition:
    condition: state
    entity_id: light.loft
    state: 'off'
  action:
    service: light.turn_on
    entity_id: light.loft


#################################################################
#
#
# Turn off Lights, slow off is B1 in flowchart, and quick off
# is B2.
#
#
################################################################
- alias: Slow Off lights
  hide_entity: true
  initial_state: 'on'
  trigger:
      # 127s
    - platform: state
      entity_id: binary_sensor.bath
      to: 'off'
      for: '00:02:07'
    - platform: state
      entity_id: binary_sensor.playroom
      to: 'off'
      for: '00:02:07'
    - platform: state
      entity_id: binary_sensor.toilet
      to: 'off'
      for: '00:02:07'
    - platform: state
      entity_id: binary_sensor.dining
      to: 'off'
      for: '00:02:07'
    - platform: state
      entity_id: binary_sensor.kitchen
      to: 'off'
      for: '00:02:07'
    - platform: state
      entity_id: binary_sensor.hall
      to: 'off'
      for: '00:02:07'
      # loft uses contact sensor, so turn off light immediately after sensor is off
    - platform: state
      entity_id: binary_sensor.loft
      to: 'off'
  condition:
    # when RID control, and light are on, Pre light boolean is off
    condition: and
    conditions:
      - condition: template
        value_template: '{{ is_state("light." + trigger.entity_id.split(".")[1], "on") }}'
      - condition: template
        value_template: '{{ is_state("input_boolean.pir_" + trigger.entity_id.split(".")[1], "on") }}'
  action: &off_light_action
  - service: light.turn_off
    data_template:
      entity_id: '{{"light." + trigger.entity_id.split(".")[1]}}'

- alias: Quick Off lights
  hide_entity: true
  initial_state: 'on'
  trigger:
      # 10s
    - platform: state
      entity_id: binary_sensor.bath
      to: 'off'
      for: '00:00:07'
    - platform: state
      entity_id: binary_sensor.playroom
      to: 'off'
      for: '00:00:07'
    - platform: state
      entity_id: binary_sensor.toilet
      to: 'off'
      for: '00:00:07'
    - platform: state
      entity_id: binary_sensor.dining
      to: 'off'
      for: '00:00:07'
    - platform: state
      entity_id: binary_sensor.kitchen
      to: 'off'
    - platform: state
      entity_id: binary_sensor.hall
      to: 'off'
      for: '00:00:07'
  condition:
    # when RID control, Pre light boolean and light are on
    condition: and
    conditions:
      - condition: template
        value_template: '{{ is_state("input_boolean.pre_" + trigger.entity_id.split(".")[1], "on") }}'
      - condition: template
        value_template: '{{ is_state("input_boolean.pir_" + trigger.entity_id.split(".")[1], "on") }}'
      - condition: template
        value_template: '{{ is_state("light." + trigger.entity_id.split(".")[1], "on") }}'
  action: *off_light_action


################################################################
#
# Safeguard for all lights
#
################################################################

- alias: Turn Off lights after long time idle
  hide_entity: true
  initial_state: 'on'
  trigger:
    # first safeguard for 307s
    - platform: state
      entity_id: binary_sensor.hall
      to: 'off'
      for: '00:05:07'
    - platform: state
      entity_id: binary_sensor.playroom
      to: 'off'
      for: '00:05:07'
    - platform: state
      entity_id: binary_sensor.toilet
      to: 'off'
      for: '00:05:07'
    - platform: state
      entity_id: binary_sensor.dining
      to: 'off'
      for: '00:05:07'
    - platform: state
      entity_id: binary_sensor.kitchen
      to: 'off'
      for: '00:05:07'
    - platform: state
      entity_id: binary_sensor.bath
      to: 'off'
      for: '00:05:07'
    - platform: state
      entity_id: binary_sensor.living_room
      to: 'off'
      for: '00:05:07'
    - platform: state
      entity_id: binary_sensor.loft
      to: 'off'
      for: '00:05:07'
  condition:
    condition: and
    conditions:
      - condition: template
        value_template: '{{ is_state("light." + trigger.entity_id.split(".")[1], "on") }}'
        # when RID control is enabled
      - condition: template
        value_template: '{{ is_state("input_boolean.pir_" + trigger.entity_id.split(".")[1], "on") }}'
  action:
  - service: light.turn_off
    data_template:
      entity_id: '{{"light." + trigger.entity_id.split(".")[1]}}'

# second safeguard for 1201s
- alias: safeguard loop
  hide_entity: true
  initial_state: 'on'
  trigger:
    - platform: time_pattern
      minutes: '/29'
      seconds: 0
  action:
    - service: light.turn_off
      data_template:
        entity_id: >
          {% if is_state("light.hall", "on") and ((as_timestamp(now())-as_timestamp(states.binary_sensor.hall.last_changed)) > 1200) %}
            light.hall
          {% elif is_state("light.playroom", "on") and ((as_timestamp(now())-as_timestamp(states.binary_sensor.playroom.last_changed)) > 1200) %}
            light.playroom
          {% elif is_state("light.toilet", "on") and ((as_timestamp(now())-as_timestamp(states.binary_sensor.toilet.last_changed)) > 1200) %}
            light.toilet
          {% elif is_state("light.dining", "on") and ((as_timestamp(now())-as_timestamp(states.binary_sensor.dining.last_changed)) > 1200) %}
            light.dining
          {% elif is_state("light.kitchen", "on") and ((as_timestamp(now())-as_timestamp(states.binary_sensor.kitchen.last_changed)) > 1200) %}
            light.kitchen
          {% elif is_state("light.bath", "on") and ((as_timestamp(now())-as_timestamp(states.binary_sensor.bath.last_changed)) > 1200) %}
            light.bath
          {% elif is_state("light.living_room", "on") and ((as_timestamp(now())-as_timestamp(states.binary_sensor.living_room.last_changed)) > 1200) %}
            light.living_room
          {% elif is_state("light.loft", "on") and ((as_timestamp(now())-as_timestamp(states.binary_sensor.loft.last_changed)) > 1200) %}
            light.loft
          {% endif %}


